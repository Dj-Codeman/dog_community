name: build and release (static + binstall naming)

on:
  workflow_dispatch:
  push:
    tags: ["v*"]

permissions:
  contents: write

env:
  BIN_NAME: doge
  VERSION: ${{ github.ref_name }} # e.g. v1.2.3

jobs:
  # ---- Linux (static MUSL via cross) ----
  build-linux-musl:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-musl
          - i686-unknown-linux-musl
          - aarch64-unknown-linux-musl
          - armv7-unknown-linux-musleabihf
    steps:
      - uses: actions/checkout@v4
      - uses: taiki-e/setup-cross@v1
      - run: rustup target add ${{ matrix.target }}
      - name: Build (static MUSL)
        run: cross build --release --target ${{ matrix.target }}
      - name: Package
        run: |
          mkdir -p dist
          OUT="${BIN_NAME}-${VERSION}-${{ matrix.target }}"
          cp target/${{ matrix.target }}/release/${BIN_NAME} dist/${OUT}
          (cd dist && zip -r "${OUT}.zip" "${OUT}")
      - uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.target }}
          path: dist/*.zip

  # ---- macOS (universal2) ----
  build-macos-universal:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - run: rustup target add x86_64-apple-darwin aarch64-apple-darwin
      - run: cargo build --release --target x86_64-apple-darwin
      - run: cargo build --release --target aarch64-apple-darwin
      - name: Lipo -> universal2
        run: |
          mkdir -p dist
          lipo -create \
            target/x86_64-apple-darwin/release/${BIN_NAME} \
            target/aarch64-apple-darwin/release/${BIN_NAME} \
            -output "dist/${BIN_NAME}-${VERSION}-apple-darwin-universal2"
          (cd dist && zip -r "${BIN_NAME}-${VERSION}-apple-darwin-universal2.zip" "${BIN_NAME}-${VERSION}-apple-darwin-universal2")
      - uses: actions/upload-artifact@v4
        with:
          name: macos-universal2
          path: dist/*.zip

  # ---- Windows (32/64-bit) ----
  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        target:
          - i686-pc-windows-msvc
          - x86_64-pc-windows-msvc
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - shell: pwsh
        run: rustup target add $env:TARGET
        env:
          TARGET: ${{ matrix.target }}
      - name: Build
        shell: pwsh
        run: cargo build --release --target $env:TARGET
        env:
          TARGET: ${{ matrix.target }}
      - name: Package
        shell: pwsh
        run: |
          New-Item -Type Directory -Force dist | Out-Null
          $out = "${env:BIN_NAME}-${env:VERSION}-${env:TARGET}.exe"
          Copy-Item "target\$env:TARGET\release\${env:BIN_NAME}.exe" "dist\$out"
          Compress-Archive -Path "dist\$out" -DestinationPath "dist\$out.zip" -Force
        env:
          BIN_NAME: ${{ env.BIN_NAME }}
          VERSION: ${{ env.VERSION }}
          TARGET: ${{ matrix.target }}
      - uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.target }}
          path: dist\*.zip

  # ---- Release ----
  release:
    runs-on: ubuntu-latest
    needs: [build-linux-musl, build-macos-universal, build-windows]
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true
      - name: Checksums
        run: |
          cd artifacts
          sha256sum * > SHA256SUMS.txt
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/*.zip
            artifacts/SHA256SUMS.txt
