name: build and release (static + binstall naming)

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version (e.g. v1.2.3) used for manual runs"
        required: false
      create_draft_release:
        description: "If true on manual runs, create a draft prerelease"
        type: boolean
        default: false
  push:
    tags: ["v*"]

permissions:
  contents: write

# One place to compute VERSION and whether we're publishing
env:
  BIN_NAME: doge
  VERSION: ${{ github.ref_type == 'tag' && github.ref_name || inputs.version }}
  IS_TAG: ${{ github.ref_type == 'tag' }}
  CREATE_DRAFT: ${{ inputs.create_draft_release == true }}

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # ---- Linux (static MUSL via cross) ----
  build-linux-musl:
    runs-on: self-hosted
    env:
      PKG_CONFIG_ALLOW_CROSS: "1"
      OPENSSL_STATIC: "1"
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-musl
          - i686-unknown-linux-musl
          - aarch64-unknown-linux-musl
          - armv7-unknown-linux-musleabihf
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable
        with:
          # rustup target isn't strictly needed for cross, but harmless
          targets: ${{ matrix.target }}

      - uses: taiki-e/install-action@v2
        with:
          tool: cross

      - name: Build (static MUSL)
        run: cross build --release --target ${{ matrix.target }}

      - name: Package
        run: |
          mkdir -p dist
          OUT="${BIN_NAME}-${VERSION}-${{ matrix.target }}"
          cp target/${{ matrix.target }}/release/${BIN_NAME} "dist/${OUT}"
          (cd dist && zip -r "${OUT}.zip" "${OUT}")

      - uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.target }}
          path: dist/*.zip
          if-no-files-found: error
          retention-days: 7

  # ---- macOS (universal2) ----
  build-macos-universal:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - run: rustup target add x86_64-apple-darwin aarch64-apple-darwin
      - run: cargo build --release --target x86_64-apple-darwin
      - run: cargo build --release --target aarch64-apple-darwin
      - name: Lipo -> universal2
        run: |
          mkdir -p dist
          OUT="${BIN_NAME}-${VERSION}-apple-darwin-universal2"
          lipo -create \
            target/x86_64-apple-darwin/release/${BIN_NAME} \
            target/aarch64-apple-darwin/release/${BIN_NAME} \
            -output "dist/${OUT}"
          (cd dist && zip -r "${OUT}.zip" "${OUT}")
      - uses: actions/upload-artifact@v4
        with:
          name: macos-universal2
          path: dist/*.zip
          if-no-files-found: error
          retention-days: 7

  # ---- Windows (32/64-bit) ----
  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        target:
          - i686-pc-windows-msvc
          - x86_64-pc-windows-msvc
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - shell: pwsh
        run: rustup target add $env:TARGET
        env:
          TARGET: ${{ matrix.target }}
      - name: Build
        shell: pwsh
        run: cargo build --release --target $env:TARGET
        env:
          TARGET: ${{ matrix.target }}
      - name: Package
        shell: pwsh
        run: |
          New-Item -Type Directory -Force dist | Out-Null
          $out = "${env:BIN_NAME}-${env:VERSION}-${env:TARGET}.exe"
          Copy-Item "target\$env:TARGET\release\${env:BIN_NAME}.exe" "dist\$out"
          Compress-Archive -Path "dist\$out" -DestinationPath "dist\$out.zip" -Force
        env:
          BIN_NAME: ${{ env.BIN_NAME }}
          VERSION: ${{ env.VERSION }}
          TARGET: ${{ matrix.target }}
      - uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.target }}
          path: dist\*.zip
          if-no-files-found: error
          retention-days: 7

  # ---- Release packaging + (optional) publish ----
  release:
    runs-on: self-hosted
    needs: [build-linux-musl, build-macos-universal, build-windows]
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true
      - name: Checksums
        run: |
          cd artifacts
          sha256sum * > SHA256SUMS.txt
      # Publish for tag pushes, OR create a draft/prerelease when manually requested
      - name: Create GitHub Release
        if: env.IS_TAG == 'true' || env.CREATE_DRAFT == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.IS_TAG == 'true' && env.VERSION || env.VERSION }}
          name: ${{ env.VERSION }}
          draft: ${{ env.IS_TAG != 'true' && env.CREATE_DRAFT }}
          prerelease: ${{ env.IS_TAG != 'true' && env.CREATE_DRAFT }}
          files: |
            artifacts/*.zip
            artifacts/SHA256SUMS.txt
